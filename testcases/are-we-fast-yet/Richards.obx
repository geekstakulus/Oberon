(*
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (migrated to Oberon+)
 *
 * This benchmark is derived from Mario Wolczko's Java and Smalltalk version of
 * Richards.
 *
 * License details:
 *   http://web.archive.org/web/20050825101121/http://www.sunlabs.com/people/mario/java_benchmarking/index.html
 *)
 
module Richards

	import B := Benchmark
		
	type 
		Richards = pointer to record (B.Benchmark) end

	proc create*(): Richards
		var r : Richards
	begin
		new(r)
		return r
	end create
	
	proc (this: Richards) benchmark(): B.Result
		var res: B.BoolResult
	begin
		// TODO (new Scheduler()).start()
	   new(res)
	   res.res := false
	   return res	
	end benchmark
		
	proc (this: Richards) verifyResult( result: B.Result ): boolean 
	begin
		return result(B.BoolResult).res
	end verifyResult

	//////// RBObject //////////////////////
	type
		Kind* = ( IDLER, WORKER, HANDLER_A, HANDLER_B, DEVICE_A, DEVICE_B )
	
		RBObject = pointer to record
				end
	
	proc (this: RBObject) append(packet, queueHead: Packet ): Packet
		var mouse, link: Packet
	begin
    packet.link := NO_WORK
    if NO_WORK = queueHead then
      return packet
    end
    mouse := queueHead
    link := mouse.link
    
    while NO_WORK # link do
      mouse := link
      link := mouse.link
    end
    mouse.link := packet
    return queueHead
	end append
	
	//////// Packet //////////////////////
	const DATA_SIZE = 4
	
	type 
		PacketKind = ( DEVICE_PACKET_KIND, WORK_PACKET_KIND )
		
		Packet = pointer to record (RBObject)
					link : Packet
					identity: integer
					kind : PacketKind
					datum : integer
					data : pointer to array of integer
				end
				
	var NO_WORK : Packet
		
	proc createPacket( link: Packet; identity: integer; kind: PacketKind ): Packet
		var p : Packet
	begin
		new(p)
		p.link := link
		p.identity := identity
		p.kind := kind
		return p
	end createPacket
	
	// TODO work in progress
begin	
	NO_WORK := nil
	// TODO TaskControlBlock NO_TASK = null
			
end Richards
