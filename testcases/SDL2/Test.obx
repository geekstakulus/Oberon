module Test

	import SDL, Out
	
	var
		window: *SDL.Window
		surface, image: *SDL.Surface
		res, timer: integer
		v: SDL.version
		x,y: carray 1 of integer 
	   event: SDL.Event	
	
	proc filter(userdata: *void; event: *SDL.Event): integer
	begin
		SDL.Log("event: %d"+0dx, event.type_)		
		return 1
	end filter
	
	
	proc tick( time: integer; param: *void ):integer
	begin
		SDL.Log("time: %d\n", SDL.GetTicks())	
		return 1
	end tick

(*
	proc checkEvents(): boolean
	var
		//event: SDL.Event
		tmp: integer
	begin
	   if SDL.WaitEventTimeout(event,30) # 0 then
	      if event.type_ = SDL.QUIT then
	         return true
	      end
	      SDL.GetMouseState(x,y)
	      Out.String("mouse x=") Out.Int(x[0],0) Out.String(" y=") Out.Int(y[0],0) Out.Ln
	   end
	   return false
	end checkEvents
*)
begin
	//trap()
	SDL.GetVersion(v)
	Out.String("Loaded SDL version: ")
	Out.Int(v.major,0) Out.String(".") Out.Int(v.minor,0) 
	Out.String(".") Out.Int(v.patch,0) Out.Ln

	SDL.Log("hello from log %d.%d.%d %f %s", v.major, v.minor, v.patch, long(123.45), "test" )
	
	SDL.SetEventFilter( filter, nil ) 
	
	// SDL.AddTimer(1000,tick, nil)
	
	window := SDL.CreateWindow("Hello SDL!", 20, 20, 512, 512, SDL.WINDOW_SHOWN )
	surface := SDL.GetWindowSurface(window)

	image := SDL.LoadBMP_RW(SDL.RWFromFile("lena.bmp", "rb"), 1)
	res := SDL.UpperBlit(image, nil, surface, nil)
	
	res := SDL.UpdateWindowSurface(window)
   SDL.FreeSurface(image)
   
   loop
	   //if checkEvents() then exit end
	   //(*
	   if SDL.WaitEventTimeout(event,30) # 0 then
	      if event.type_ = SDL.QUIT then
	         exit
	      end
	      SDL.GetMouseState(x,y)
	      Out.String("mouse x=") Out.Int(x[0],0) Out.String(" y=") Out.Int(y[0],0) Out.Ln
	   end
	   //*)
   end
	
	SDL.DestroyWindow(window)
	SDL.Quit()
	println("Done")
end Test
