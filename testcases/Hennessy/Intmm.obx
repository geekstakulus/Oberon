// see Main.obx
module Intmm

	import Util
	
	// Multiplies two integer matrices.
	
	const
		rowsize = 40

	type
		intmatrix = array rowsize + 1, rowsize + 1 of integer

	var
		ima, imb, imr: intmatrix // Nun lokal definiert PM 24.09.94

	proc Initmatrix(var m: intmatrix)
		var 
			temp, i, j: integer
	begin 
		i := 1
		while i <= rowsize do 
			j := 1
			while j <= rowsize do 
				temp := Util.Rand()
				m[i][j] := temp - (temp div 120) * 120 - 60
				inc(j) 
			end 
			inc(i) 
		end 
	end Initmatrix
	
	proc Innerproduct(var result: integer; var a, b: intmatrix; row, column: integer)
		var 
			i: integer
	// computes the inner product of A[row,*] and B[*,column]
	begin 
		result := 0
		i := 1
		while i <= rowsize do 
			result := result + a[row][i] * b[i][column]
			inc(i) 
		end 
	end Innerproduct
	
	proc Run*()
		var  // ima, imb, imr: intmatrix;
			i, j: integer
	begin 
		Util.Initrand()
		Initmatrix(ima)
		Initmatrix(imb)
		i := 1
		while i <= rowsize do 
			j := 1
			while j <= rowsize do 
				Innerproduct(imr[i][j], ima, imb, i, j)
				inc(j) 
			end 
			inc(i) 
		end 
	end Run
	
end Intmm
