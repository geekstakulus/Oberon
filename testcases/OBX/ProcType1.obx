module ProcType1

	var p : proc(i: integer; in str: array of char)
		// m : proc(^)(in str: array of char) // TODO
	
	proc outer()
		proc inner(i: integer; in str: array of char)
		begin
			println("hello from inner:")
			println(i)
			println(str)
		end inner
		type T = record end
		proc (var this: T)sayHello(in str: array of char)
		begin
			println("hello from method")
		end sayHello
		var t1: T
			t2: pointer to T
	begin
		p := inner
		// m := t1.sayHello // TODO t1 can go out of scope, illegal
		new(t2)
		// m := t2.sayHello // t2 remains valid even if outer ends, legal
	end outer

begin
	outer()
	p(22,"hello")
	

end ProcType1
