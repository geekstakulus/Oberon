MODULE Drawing;
  IMPORT F := Fibonacci;
  TYPE Figure* = POINTER TO RECORD
                   position: RECORD x,y: INTEGER END
                END;  
  PROCEDURE (this: Figure) draw*() END;
    
  TYPE
     Circle* = POINTER TO RECORD (Figure) diameter: INTEGER END;
     Square* = POINTER TO RECORD (Figure) width: INTEGER END; 
  PROCEDURE (this: Circle) draw*() END;
  PROCEDURE (this: Square) draw*() END;
    
  IMPORT C := Collections<Figure>;
    
  VAR figures: C.Deque;
       circle: Circle;
       square: Square;
    
  PROCEDURE drawAll*();
    TYPE I = RECORD(C.Iterator) count: INTEGER END;
    PROCEDURE (VAR this: I) apply( IN figure: Figure );
    BEGIN figure.draw(); INC(this.count) END apply;
    VAR i: I; // count is initialized to zero
  BEGIN
    figures.forEach(i);
    ASSERT(i.count = 2);
  END drawAll;
BEGIN 
  figures := C.createDeque();
  NEW(circle);
  circle.position.x := F.calc(3); circle.position.y := F.calc(4);
  circle.diameter := 3;
  figures.append(circle);
  NEW(square);
  square.position.x := F.calc(5); square.position.y := F.calc(6);
  square.width := 4;
  figures.append(square);
  drawAll();
END Drawing. 
